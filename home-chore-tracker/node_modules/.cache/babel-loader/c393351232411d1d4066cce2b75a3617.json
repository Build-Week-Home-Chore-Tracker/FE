{"ast":null,"code":"import _slicedToArray from \"/Users/akak/workspace/Lambda-Training/FE/home-chore-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/akak/workspace/Lambda-Training/FE/home-chore-tracker/src/Components/SignIn.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from \"yup\";\nimport { Card, Row, Button } from 'reactstrap';\n\nconst SignIn = ({\n  errors,\n  touched,\n  values,\n  status\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        users = _useState2[0],\n        setUsers = _useState2[1];\n\n  useEffect(() => {\n    status && setUsers(users => [...users, status]);\n  }, [status]);\n  return React.createElement(\"div\", {\n    className: \"Onboard-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Card, {\n    body: true,\n    inverse: true,\n    color: \"success\",\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(Form, {\n    className: \"row-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"text\",\n    name: \"email\",\n    placeholder: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), touched.email && errors.email && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, errors.email)), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"text\",\n    name: \"password\",\n    placeholder: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), touched.password && errors.password && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, errors.password)), React.createElement(Row, {\n    className: \"button-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"warning\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Sign In\"), React.createElement(Button, {\n    color: \"warning\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Sign Up\")))));\n};\n\nconst FormikSignIn = withFormik({\n  mapPropsToValues({\n    email,\n    password,\n    terms\n  }) {\n    return {\n      email: email || \"\",\n      password: password || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required(\"email is required\"),\n    password: Yup.string().required(\"Password is required\")\n  }) // handleSubmit(values, { setStatus }) {\n  //   axios\n  //     // values is our object with all our data on it.\n  //     .post(\"https://reqres.in/api/users/\", values)\n  //     .then(res => {\n  //       setStatus(res.data);\n  //       console.log(res);\n  //     })\n  //     .catch(err => console.log(err.response));\n  // }\n\n})(SignIn); // currying functions in Javascript\n\nexport default FormikSignIn;","map":{"version":3,"sources":["/Users/akak/workspace/Lambda-Training/FE/home-chore-tracker/src/Components/SignIn.js"],"names":["React","useState","useEffect","Form","Field","withFormik","Yup","Card","Row","Button","SignIn","errors","touched","values","status","users","setUsers","email","password","FormikSignIn","mapPropsToValues","terms","validationSchema","object","shape","string","required"],"mappings":"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","sourcesContent":["import React , { useState, useEffect } from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from \"yup\";\nimport { Card, Row, Button } from 'reactstrap';\n\n  const SignIn = ({ errors, touched, values, status }) => {\n    const [users, setUsers] = useState([]);\n    useEffect(() => {\n      status && setUsers(users => [...users, status]);\n    }, [status]);\n  \n    return (\n      <div className=\"Onboard-form\">\n        \n            <Card body inverse color=\"success\" className=\"text-center\">\n                <Form className = \"row-container\">\n                    <Row>\n                        <Field \n                            type=\"text\" \n                            name=\"email\" \n                            placeholder=\"email\" />\n                            {touched.email && errors.email && (\n                            <p className=\"error\">{errors.email}</p>\n                            )}\n                    </Row>\n                    \n                    <Row>\n                        <Field \n                            type=\"text\" \n                            name=\"password\" \n                            placeholder=\"password\" />\n                            {touched.password && errors.password && (\n                            <p className=\"error\">{errors.password}</p>\n                            )}\n                    </Row>\n                    \n                    {/* <Row>\n                        <label className=\"checkbox-container\">\n                            Terms of Service\n                            <Field\n                            type=\"checkbox\"\n                            name=\"terms\"\n                            checked={values.terms}\n                            />\n                            <span className=\"checkmark\" />\n                        </label>\n                    </Row> */}\n                    \n                    <Row className =\"button-row\">\n                        <Button color=\"warning\" type=\"submit\">Sign In</Button>\n                        <Button color=\"warning\" type=\"submit\">Sign Up</Button>\n                    </Row>\n\n                    {/* <Row>\n                    </Row> */}\n                </Form>\n            </Card>\n        \n       \n      </div>\n    );\n  };\n\n  const FormikSignIn = withFormik({mapPropsToValues({email, password, terms}) {\n      return {\n        email: email || \"\",\n        password: password || \"\"\n      };\n    },\n  \n    validationSchema: Yup.object().shape({\n      email: Yup.string().required(\"email is required\"),\n      password: Yup.string().required(\"Password is required\")   \n     }),\n  \n    // handleSubmit(values, { setStatus }) {\n    //   axios\n    //     // values is our object with all our data on it.\n    //     .post(\"https://reqres.in/api/users/\", values)\n    //     .then(res => {\n    //       setStatus(res.data);\n    //       console.log(res);\n    //     })\n    //     .catch(err => console.log(err.response));\n    // }\n  })(SignIn); // currying functions in Javascript\n export default FormikSignIn;"]},"metadata":{},"sourceType":"module"}